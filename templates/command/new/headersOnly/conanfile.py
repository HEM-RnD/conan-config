# Recipe autogenerated with Conan {{ conan_version }} using `conan new --template` command

from conans import ConanFile, CMake, tools

class {{package_name}}Conan(ConanFile):
    name = "{{ name }}"
    version = "{{ version }}"
    license = "HEM internal"
    description = "{{ description }}"
    topics = () # Insert keywords here, eg.: "Notifier", "Observer", "Observer pattern", "Design patterns"
    url = "{{ url }}"
    generators = "cmake"
    settings = "os", "compiler", "build_type", "arch"
    options = {"shared": [True, False]}
    default_options = {"shared": False}
    exports_sources = "*", "!build/*", "!.*/*", "!.gitignore", "!bitbucket-pipelines.yml", "!*conanfile.py", "!.clang-tidy", "!.clang-format", ".version/*",
    requires = [] # Insert here the other packages that the {{ name }} package depend on 
    build_requires = ["HEM_TestingFramework/0.0.1@hem/stable", "HEM_ClangTidy/[>=0.0.1, loose=False]@hem/stable"]

    def set_version(self):
        try:
            self.version = tools.load(".version/Version.txt")
        except:
            print(".version/Version.txt file not found. Default version is set")

    def build(self):
        cmake = CMake(self)
        cmake.configure()
        cmake.build()
        cmake.test()

    def package(self):
        cmake = CMake(self)
        cmake.install()

    def package_info(self):
        self.cpp_info.includedirs = ["inc"]

    def package_id(self):
        self.info.header_only()

    def imports(self):
        self.copy("*", dst="", src="analyser", root_package="HEM_ClangTidy")
